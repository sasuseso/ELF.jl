var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Elf","category":"page"},{"location":"#Elf","page":"Home","title":"Elf","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Elf]","category":"page"},{"location":"#Elf.Elf64_Ehdr","page":"Home","title":"Elf.Elf64_Ehdr","text":"Elf64_Ehdr\n\nA type represents 64bit ELF header.\n\n\n\n\n\n","category":"type"},{"location":"#Elf.Elf64_Phdr","page":"Home","title":"Elf.Elf64_Phdr","text":"Elf64_Phdr\n\nA type represents 64bit ELF program header.\n\n\n\n\n\n","category":"type"},{"location":"#Elf.Elf64_Rel","page":"Home","title":"Elf.Elf64_Rel","text":"Elf64_Rel\n\nA type represents 64bit ELF relocasion table entry (SHT_REL).\n\n\n\n\n\n","category":"type"},{"location":"#Elf.Elf64_Rela","page":"Home","title":"Elf.Elf64_Rela","text":"Elf64_Rel\n\nA type represents 64bit ELF relocasion table entry (SHT_RELA for RISC processors).\n\n\n\n\n\n","category":"type"},{"location":"#Elf.Elf64_Shdr","page":"Home","title":"Elf.Elf64_Shdr","text":"Elf64_Shdr\n\nA type represents 64bit ELF section header.\n\n\n\n\n\n","category":"type"},{"location":"#Elf.Elf64_Sym","page":"Home","title":"Elf.Elf64_Sym","text":"Elf64_Sym\n\nA type represents 64bit ELF Symbol Table entry.\n\n\n\n\n\n","category":"type"},{"location":"#Elf.elfclass-Tuple{Elf64_Ehdr}","page":"Home","title":"Elf.elfclass","text":"elfclass(ehdr::Elf64_Ehdr) -> EHClass\n\nDetrmines ELF class(64bit or 32bit) if invalid class error will occur.\n\n\n\n\n\n","category":"method"},{"location":"#Elf.iself-Tuple{Elf64_Ehdr}","page":"Home","title":"Elf.iself","text":"iself(bin) -> Bool\n\nVerify ELF Header with Magic numbers\n\nExamples\n\njulia> iself(read(\"/path/to/binary\"))\ntrue\n\nArguments\n\nbin::Vector{UInt8} : binary file to check.\n\n\n\n\n\n","category":"method"},{"location":"#Elf.sections-Tuple{Array{UInt8,1}}","page":"Home","title":"Elf.sections","text":"sections(bin::Vector{UInt8}) -> OrderedDict{String,Elf64_Shdr}\n\nSection header infomation. Returns dictoinary represents section name and its infomation ordered by section number.\n\n\n\n\n\n","category":"method"}]
}
